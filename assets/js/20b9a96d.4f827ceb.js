"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[46013],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={},l="Renaming Git branches to comply with TractusX standards",o={unversionedId:"kits/tractusx-edc/docs/development/decision-records/2023-04-03_renaming_branches/README",id:"version-3.1.0/kits/tractusx-edc/docs/development/decision-records/2023-04-03_renaming_branches/README",title:"Renaming Git branches to comply with TractusX standards",description:"Decision",source:"@site/docs-kits_versioned_docs/version-3.1.0/kits/tractusx-edc/docs/development/decision-records/2023-04-03_renaming_branches/README.md",sourceDirName:"kits/tractusx-edc/docs/development/decision-records/2023-04-03_renaming_branches",slug:"/kits/tractusx-edc/docs/development/decision-records/2023-04-03_renaming_branches/",permalink:"/docs-kits/3.1.0/kits/tractusx-edc/docs/development/decision-records/2023-04-03_renaming_branches/",draft:!1,tags:[],version:"3.1.0",frontMatter:{}},s={},c=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Selecting default branches",id:"selecting-default-branches",level:3},{value:"The problem with GitFlow",id:"the-problem-with-gitflow",level:3},{value:"Approach",id:"approach",level:2},{value:"Further notes",id:"further-notes",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"renaming-git-branches-to-comply-with-tractusx-standards"},"Renaming Git branches to comply with TractusX standards"),(0,a.kt)("h2",{id:"decision"},"Decision"),(0,a.kt)("p",null,"TractusX-EDC will rename its Git branching structure to comply with TractusX release guidelines, and to be able to\nleverage\nGitHub convenience features, while continuing to use the Gitflow branching model."),(0,a.kt)("h2",{id:"rationale"},"Rationale"),(0,a.kt)("p",null,"The TractusX organization has established\na ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/docs/release/trg-2/trg-2-1/"},"release guideline")," which mandates that all projects'\ndefault branch be called ",(0,a.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,a.kt)("h3",{id:"selecting-default-branches"},"Selecting default branches"),(0,a.kt)("p",null,"In GitHub, the default branch has a couple of important features attached to it:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"cloning or forking the repository will automatically check out the default branch"),(0,a.kt)("li",{parentName:"ul"},"when creating pull requests the default branch is targeted by default"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue"},"automatic issue linking and closing"),"\nonly works with the default branch")),(0,a.kt)("h3",{id:"the-problem-with-gitflow"},"The problem with GitFlow"),(0,a.kt)("p",null,"The GitFlow branching model suggests that the day-to-day work be done on a branch called ",(0,a.kt)("inlineCode",{parentName:"p"},"develop"),", while the ",(0,a.kt)("inlineCode",{parentName:"p"},"main"),"\nbranch stores the version history and only receives (merge) commits after a version releases."),(0,a.kt)("p",null,"This would call for ",(0,a.kt)("inlineCode",{parentName:"p"},"develop")," being the GitHub default branch, which is forbidden by the aforementioned release\nguideline."),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("p",null,"In order to comply with the TractusX release guideline, to make use of the GitHub features ",(0,a.kt)("em",{parentName:"p"},"and")," also use GitFlow, we\npropose renaming a couple of branches. While GitFlow ",(0,a.kt)("em",{parentName:"p"},"suggests")," branch names, it does not ",(0,a.kt)("em",{parentName:"p"},"require")," it, and most\ntools allow for customizing them anyway. Thus, from an abstract perspective, the following changes are necessary:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"main")," becomes our work/development branch. All pull requests target ",(0,a.kt)("inlineCode",{parentName:"li"},"main"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"develop")," gets deleted"),(0,a.kt)("li",{parentName:"ul"},"a new branch ",(0,a.kt)("inlineCode",{parentName:"li"},"releases")," is introduced, which tracks the release history and receives post-release merge commits.")),(0,a.kt)("p",null,'Technically this will involve force-pushing, which is a potentially destructive operation. Therefor the following\nsection outlines the exact sequence of steps. Note that "upstream" refers to ',(0,a.kt)("inlineCode",{parentName:"p"},"eclipse-tractusx/tractusx-edc"),', while "\nfork" refers to ',(0,a.kt)("inlineCode",{parentName:"p"},"catenax-ng/tx-tractusx-edc"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"create a new branch ",(0,a.kt)("inlineCode",{parentName:"li"},"upstream/releases")),(0,a.kt)("li",{parentName:"ul"},"create a new branch ",(0,a.kt)("inlineCode",{parentName:"li"},"fork/releases"),", set it to track ",(0,a.kt)("inlineCode",{parentName:"li"},"upstream/releases")),(0,a.kt)("li",{parentName:"ul"},"push the contents of ",(0,a.kt)("inlineCode",{parentName:"li"},"fork/main")," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"upstream/releases")),(0,a.kt)("li",{parentName:"ul"},"synchronize ",(0,a.kt)("inlineCode",{parentName:"li"},"upstream/develop")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"fork/develop")),(0,a.kt)("li",{parentName:"ul"},"force-push the contents of ",(0,a.kt)("inlineCode",{parentName:"li"},"develop")," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"upstream/main")," (do ",(0,a.kt)("strong",{parentName:"li"},"not")," update the tracking branch!)"),(0,a.kt)("li",{parentName:"ul"},"synchronize ",(0,a.kt)("inlineCode",{parentName:"li"},"upstream/main")," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"fork/main")),(0,a.kt)("li",{parentName:"ul"},"delete/archive ",(0,a.kt)("inlineCode",{parentName:"li"},"upstream/develop")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"fork/develop"))),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note that most of this will likely need to be done manually, since GitHub does not allow for advanced Git operations\nlike force-pushing. Write access to ",(0,a.kt)("inlineCode",{parentName:"em"},"upstream")," is required!")),(0,a.kt)("h2",{id:"further-notes"},"Further notes"),(0,a.kt)("p",null,"The new ",(0,a.kt)("inlineCode",{parentName:"p"},"releases")," branch (note the plural) will serve the same purpose that ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," did up until now, which is to track\nall releases (via merge commits and tags) in chronological order. We will continue to have separate ",(0,a.kt)("inlineCode",{parentName:"p"},"release/x.y.z"),"\nbranches for every release."))}u.isMDXComponent=!0}}]);